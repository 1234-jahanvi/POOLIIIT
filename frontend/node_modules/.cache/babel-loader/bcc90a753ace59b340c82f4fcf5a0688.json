{"ast":null,"code":"import _objectSpread from \"/home/agam/Desktop/zense/trial_POOLIIIT/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/agam/Desktop/zense/trial_POOLIIIT/frontend/src/components/register.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './css/register.css';\nimport { Form, Input, Select, Button, AutoComplete } from 'antd';\nimport MainLayout from './main-layout';\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, fieldsValue) => {\n        if (err) {\n          return;\n        } // Should format date value before submit.\n\n\n        const values = _objectSpread({}, fieldsValue, {\n          'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD'),\n          'time-picker': fieldsValue['time-picker'].format('HH:mm:ss')\n        });\n\n        console.log('Received values of form: ', values);\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"+91\")));\n    const config = {\n      rules: [{\n        type: 'object',\n        required: true,\n        message: 'Please select time!'\n      }]\n    };\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, website));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(MainLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"First Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, getFieldDecorator('fname', {\n      rules: [{\n        required: true,\n        message: 'Please input your First name'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Last Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, getFieldDecorator('lname', {\n      rules: [{\n        required: true,\n        message: 'Please input your Last name'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Register\")))));\n  }\n\n}\n\nconst Register = Form.create({\n  name: 'register'\n})(RegistrationForm);\nexport default Register;","map":{"version":3,"sources":["/home/agam/Desktop/zense/trial_POOLIIIT/frontend/src/components/register.js"],"names":["React","Form","Input","Select","Button","AutoComplete","MainLayout","Option","AutoCompleteOption","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","fieldsValue","values","format","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","config","rules","type","required","message","websiteOptions","map","website","validator","Register","create","name"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './css/register.css';\nimport {\n  Form,\n  Input,\n  Select,\n  Button,\n  AutoComplete,\n} from 'antd';\nimport MainLayout from './main-layout';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n//Time part begins\n\n//Time part ends\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n\n      // Should format date value before submit.\n      const values = {\n        ...fieldsValue,\n        'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD'),\n        'time-picker': fieldsValue['time-picker'].format('HH:mm:ss'),\n      };\n      console.log('Received values of form: ', values);\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 16,\n          offset: 8,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"86\">+91</Option>\n      </Select>,\n    );\n\n    const config = {\n      rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n    };\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n    <div>\n      <MainLayout>\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n            <Form.Item label=\"First Name\">\n            {getFieldDecorator('fname', {\n                rules: [\n                {\n                    required: true,\n                    message: 'Please input your First name',\n                },\n                ],\n            })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"Last Name\">\n            {getFieldDecorator('lname', {\n                rules: [\n                {\n                    required: true,\n                    message: 'Please input your Last name',\n                },\n                ],\n            })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n                rules: [\n                {\n                    type: 'email',\n                    message: 'The input is not valid E-mail!',\n                },\n                {\n                    required: true,\n                    message: 'Please input your E-mail!',\n                },\n                ],\n            })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n                rules: [\n                {\n                    required: true,\n                    message: 'Please input your password!',\n                },\n                {\n                    validator: this.validateToNextPassword,\n                },\n                ],\n            })(<Input.Password />)}\n            </Form.Item>\n            <Form.Item label=\"Confirm Password\" hasFeedback>\n            {getFieldDecorator('confirm', {\n                rules: [\n                {\n                    required: true,\n                    message: 'Please confirm your password!',\n                },\n                {\n                    validator: this.compareToFirstPassword,\n                },\n                ],\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n            </Form.Item>\n            \n            <Form.Item label=\"Phone Number\">\n            {getFieldDecorator('phone', {\n                rules: [{ required: true, message: 'Please input your phone number!' }],\n            })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\n            </Form.Item>\n\n            {/* <Form.Item label=\"DatePicker\">\n            {getFieldDecorator('date-picker', config)(<DatePicker />)}\n            </Form.Item>\n            \n            <Form.Item label=\"TimePicker\">\n            {getFieldDecorator('time-picker', config)(<TimePicker />)}\n            </Form.Item>\n             */}\n            <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n                Register\n            </Button>\n            </Form.Item>\n        </Form>\n      </MainLayout>\n    </div>\n    );\n  }\n}\n\nconst Register = Form.create({ name: 'register' })(RegistrationForm);\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}