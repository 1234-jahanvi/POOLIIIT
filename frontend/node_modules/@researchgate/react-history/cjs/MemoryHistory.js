"use strict";

exports.__esModule = true;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _history = require("history");

var _canUseDOM = require("./canUseDOM");

var _canUseDOM2 = _interopRequireDefault(_canUseDOM);

var _PropTypes = require("./PropTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Manages session history using in-memory storage.
 */
var MemoryHistory = function (_React$Component) {
  _inherits(MemoryHistory, _React$Component);

  MemoryHistory.prototype.getChildContext = function getChildContext() {
    return { history: this.history };
  };

  function MemoryHistory(props) {
    _classCallCheck(this, MemoryHistory);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    if (_canUseDOM2.default) {
      var _this$props = _this.props,
          getUserConfirmation = _this$props.getUserConfirmation,
          initialEntries = _this$props.initialEntries,
          initialIndex = _this$props.initialIndex,
          keyLength = _this$props.keyLength;


      _this.history = (0, _history.createMemoryHistory)({
        getUserConfirmation: getUserConfirmation,
        initialEntries: initialEntries,
        initialIndex: initialIndex,
        keyLength: keyLength
      });

      // Do this here so we catch actions in cDM.
      _this.unlisten = _this.history.listen(function () {
        return _this.forceUpdate();
      });
    } else {
      _this.history = {};
    }
    return _this;
  }

  MemoryHistory.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  MemoryHistory.prototype.render = function render() {
    var children = this.props.children;


    return typeof children === "function" ? children(this.history) : _react2.default.Children.only(children);
  };

  return MemoryHistory;
}(_react2.default.Component);

MemoryHistory.propTypes = {
  getUserConfirmation: _propTypes2.default.func,
  initialEntries: _propTypes2.default.array,
  initialIndex: _propTypes2.default.number,
  keyLength: _propTypes2.default.number,
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]).isRequired
};
MemoryHistory.childContextTypes = {
  history: _PropTypes.history.isRequired
};
exports.default = MemoryHistory;